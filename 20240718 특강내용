코딩테스트를 보는 이유
- 대규모 데이터 처리
- 동시 접속자가 많음
- 빠른 처리 속도가 필요

잘하면 뭐가 좋을까?
- 서류 + 코테 같이 평가하는 회사에서 유리
- 어필할 수 있는 it 역량

준비해야 하는 방법
- 많이 풀어보아야 한다.

출제자도 사람이다. 아주 독창적인 문제는 만들기 힘듦
정해진 시간동안, 자동완성 없이, 검색 없이 푸는 연습이 필요

쉬운 문제(백준 브론즈, 프로그래머스 레벨1) 풀어야 하나?
- 무조건 푸는게 좋다.

어려운 문제만 풀면 생각이 고정된다.
쉬운걸 쉽게 푸는 것도 능력, 연습이 필요

해보고 모르겠으면 답 보고 하는 것도 좋다.

몇몇 문제는 특정 알고리즘을 모르면, 어떤 지식을 모르면 못 품
- 2~3시간 고민해보고 생각 안나면 답 보세요.

풀고 다른 사람 답 찾는 것도 중요하다.
예시 -  자바에서 int를 string 으로 바꾸는 방법
- int a = 10; -> ""+ a 문자열 가능

프로그래머스에 익숙해지는 것이 좋다(코딩 테스트용). 공부는 백준이 좋다.

코딩 테스트 문제 빨리 읽는 기술?
- 문제 수가 적다. 꼼꼼하게 읽어야한다.

스터디 하는 방식?
- 잘하는 사람을 납치해야한다. 여러 방법을 시도하며 각자 맞는 스타일 찾기

예제는 다 맞았는데 떨어진 케이스
- 공개되지 않는 테스트 케이스가 있다. 이것까지 다맞아야 한다.

* 틀리는 이유
오버 플로우 int 오버 플로우 실수
- 문제에서 나오는 최대 범위를 생각해보는 습관 키우기

부동소수점 오차
- 실수 자료형에서 발생하는 오차

통분을 해야한다. 실수형이 아닌 정수형 비교가 정확하다.
실수형에서 ==(비교 연산자) 사용 금지

자바에서 String 더해야 한다면 StringBuilder 사용하기
- String a, b, c, d, e를 더해야한다면
- 이 과정에서 ab, abc, abcd가 생성 소멸은 언제? GC가 바로 바로 지우지 않아서 메모리 초과

자바의 입출력 속도
scanner나 System.out.println(); 는 굉장히 느리다.

C/C++ 사용하는 경우
- 문제는 메모리 제한을 넉넉히 주지만 스택 메모리는 크다.
- 지역 변수로 너무 큰 배열을 선언하면 메모리가 터짐 큰 배열은 전역변수로 선언하면

정답률을 올리는 방법
테스트 케이스 추가 적극적으로 이용하기
- 예제는 출제진이 난이도를 조정하는 하나의 방법
- 예제를 많이준다 or 잘 틀릴것 같은 부분을 준다(N=1 일때 예외 처리하기)or 오버플로우를 보여준다.
- 테스트 케이스를 여러개를 직접 만들어본다 -> 난이도를 낮추는 방법

엣지 케이스, 특이 케이스를 고민해보기
범위가 가장 작을때, 가장 클 때 배열이 모두 같은 값일 때 등등
+ 랜덤 데이터 만들어 보기 아무 숫자나 적어놓고 정답을 손으로 계산

문제 1번
https://www.acmicpc.net/problem/30890

문제 2번 
https://www.acmicpc.net/problem/2493
