학습 내용

1. 세션과 쿠키를 Spring API 로 어떻게 활용하는지에 대한 학습

2. 상태유지 기술
	1. 쿠키 
		- 상태유지 값을 client 브라우저
		- 문자열만 저장 
		- jsp 에서 내장 객체 아님
		
	2. 세션
		- 서버 메모리
		- 저장 데이터 타입인 객체 타입 모두 허용
		- jsp의 내장 객체
		
3. 주요 API
	1. @Controller 
		- 동기방식 controller 개발시 주로 사용
	2. @GetMapping
		- get방식 http 처리 메소드 
	3. @SessionAttributes
		- 세션에서 사용할 key값들 등록시 필수
		- 위치 : class 선언구
		
	4. @ModelAttribute
		- 세션에 저장된 key로 데이터 획득시 주로 메소드 parameter에서 사용
		
	5. SessionStatus 
		: HttpSession이 아닌 @SessionAttributes와 연관
		: 세션 삭제시 메소드 parameter로 선언
		- setComplete() : 세션 소멸
		
	6. Model
		- addAttribute() - 데이터 저장
		- getAttribute() - 데이터 반환
			: @ModelAttribute로 Model에 저장했던 데이터 획득(반환) 가능
		- spring api의 카멜레온
		@SessionAttributes에 등록된 key 사용시 HttpSession
		non-@SessionAttributes에 등록시 HttpServletRequest	
			

step15 maven 파일 -> gradle 로 변경

Servlet&JSP 기반의 환경
- WEB-INF
- META-INF/context.xml - db의 설정, tomcat종속적인 설정
- javax.sql.DataSource - Connection 개수 제약, 관리, 제공해주는 내부 JDK API

Spring + JDBC 유지
- implementation 'org.springframework.boot:spring-boot=starter-jdvc'
- import org.springframework.jdbc.datasource.DriverMangerDataSource;
- 하단 코드처럼 명시적으로 Connection 객체 제공
 : db접속 정보들은 별도의 properties로 파일로 분리 권장

IT개발시에는 안될수도 있다는 가정먼저 고려

예외처리 전담 메소드
1. 장점
    - 코드에 예외처리 코드의 필수이나 중복 및 코드가 지저분해짐
    - 예외 처리 전담 메소드 or 예외 전담 클래스 별도로 개발
    - @ExceptionHandler

 코드 수정
 1. jsp & jstl
 //jsp 사용을 위한 추가 설정
implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	
implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

implementation 'jakarta.servlet:jakarta.servlet-api' //스프링부트 3.0 이상
implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api' //스프링부트 3.0 이상
implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl' //스프링부트 3.0 이상

2. 수정 부분
BoardController
    - servlet -> springframework
    - DAO 검색후 요청 객체에 저장후 list.jsp
        : 요청객체에 데이터 저장 후 forward
        : ModelAndView
            Model - 요청객체에 데이터 저장
            View - list.jsp
                : WEB-INF/list.jsp
                : application.properties에 jsp 위치 추가


