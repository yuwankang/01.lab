학습내용

* 방명록 *

[1] 환경셋팅

1. oracle db
	- 스키마로 table 과 sequence 생성
		: sql/GuestBook.sql

2. web server가 db 접속 개수 제어
	- Connection Pool[cp]
		- 설정 방식은 서버별로 다름
		- 주의사항
			- db별 고유한 id 설정
				name="jdbc/myoracle"
	- tomcat 기반으로 설정하는 방식
		WEB-INF와 동일한 경로에 META-INF/context.xml 파일 생성
	- context.xml
		db의 접속 정보
		Connection 동시 접속자 수 설정
		SpringBoot
			- 설정 하나에 다 반영
		
	- 자바 코드 관점에서 이 설정을 사용하는 방법
		util.DataSourceManager 클래스 확인 필수
		ctx.lookup("java:comp/env/jdbc/myoracle");
		java:comp/env - 자바실행 환경에서 재사용 가능한 것들
		dbc/myoracle - context.xml 파일에 설정한 고유한 db구분 이름
			
		


리뷰
1. 실행 프로세스
    login.html  ->  A servet   ->      B servlet
    get 요청     doGet()&doPost()  doGet()&doPost()
                B로 이동시 리다이렉트

                - doGet()      ->     doGet()

---------------------------------------------------------    
    login.html  ->  A servet   ->      B servlet
    post 요청     doGet()&doPost()  doGet()&doPost()
                B로 이동시 리다이렉트

                - dopost()      ->    doGet()  
---------------------------------------------------------
    login.html  ->  A servet   ->      B servlet
    post 요청     doGet()&doPost()  doGet()&doPost()
                B로 이동시 foward

                - dopost()      ->    dopost()
---------------------------------------------------------
    login.html  ->  A servet   ->      B servlet
    post 요청     doGet()&doPost()  doGet()&doPost()
                B로 이동시 redirect

                - dopost()      ->    doGet()                               

----------------------------------------------------------------------------


2. 트러블 슈팅 추가 문제
-  Logincheck에서 foward방식으로 web page 이동시 Welcome에서 단순 링크로 login.html로 이동이 안되는 404에러 발생
- 단 redirect로 이동에는 정상 이동

jsp 적용 process

login.html -> LoginCheck.java -> welcome.jsp -> Logout.java -> login.html

request ->

--------------------------------------------------------------------------------
JSP
1. servlet으로 변환되어 실행
    - 최초로 호출될때 변환
    - servlet변환 -> 컴파일 -> 바이트코드 로딩 -> servlet 객체 생성 -> 서비스메소드 실행

2. 기능
    - java 데이터를 브라우저 화면에 출력을 담당하는 스펙

3. 개발 방법
    1. html/css/javascript
    2. jsp tag
        - 1과 2번은 가급적 최소화로 사용
            - jsp 스펙 생성시부터 제시하는 표준 tag
            - java 코드가 많이 혼용되어 사용(현 추세에 맞지 않음)
        - 3, 4 사용 권장
            - java 코드 최소화, 즉 tag 위주로 간결하게 개발 권장


        1. 스크립팅 tag <% 5가지
        2. jsp 액션 tag
        3. EL
        4. JSTL
            - 별도의 library 셋팅
            - apache 사이트에서 제공
            - 단, 수업시간에 버전 호환 이슈로 tomcat 제공 library 사용 예정
            - 추후 maven으로 설정 예정

4. tag 상세 설명
    1. 스크립팅 tag 5가지
        - <%@ %> : jsp 선언구에 사용 필수
            <%@ page %> : page지시자, jsp 설정 정보, import
            <%@ taglib %> : 오부 tag library 포함할 때
        - <%-- --%> : 주석, client에게 전송되지 않는 서버단만의 주석
        - <% %>     : 순수 자바 코드 영역, service메소드 구현부로 자동 반영
                    : 가급적 최소로 사용
        - <%! %>    : 선언자, 멤버 변수, 메소드 구현 tag
        - <%= %>    : 브라우저에 데이터 출력 tag
                      EL tag로 대체 권장
    2. jsp application
        - <jsp:...> action tag
        - 주요 tag
            forward 이동 tag
            <jsp:forward page="이동 page">
            request.getRequestDispatcher("이동 page").forward(request, response);
    
    3. EL
        - ${}
        - jsp에 작성하는 tag는 브라우저에 출력

    4. JSTL
        - 반복 tag, 조건 tag
        - 자바코드 최소화 할 수 있는 tag
        - library 셋팅 필수, jsp에 사용 선언