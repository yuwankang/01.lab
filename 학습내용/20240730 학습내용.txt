JPA 학습
- Java Persistence API
- 자바 진영의 ORM 기술 표준
- SQL을 직접 다루지 않고 자바 클래스와 DB table 매핑

1. 개발환경 구축
    1. mavern
    2. jpa 2.2 & hibernate 5.4 버전 활용
    3. 실시간 기록을 위한 log4j framework 활용
        - log4j.properties


2. 의존 관계 library 버전 확인

3. log4j framework
    - log4j.jar 세팅 필수[log for java]
    
    1. log 기록의 선두
    2. 설정 파일명이 고정
         - log4j.properties
         - key=value 구조
         - 용도
            기록
    3. 기록
        1. 서버 콘솔창
        2. 일반 text 파일로 관리
            - daily로 자동 백업
            - 권장 확장자
                - file명_날짜.log
        3. 중요한 기록 실시간으로 db(RDBMS & NoSQL)로 백업
    4. 용어
        trace > debug > info > warning > error > fatal

4. JPA library
    1. jpa framework
    2. hibernate도 함께 세팅
    3. 버전 호환 확인 후 사용해야 함
    4. 개발 구조
        1. library 셋팅 
        2. 설정파일 필요
            META-INF/persistence.xml
            해당 버전의 스펙에 맞게 선언구가 명시되어 있어야 하며
            tag 및 구조도 제시된 스펙에 맞게 개발
        3. 해당 API로 개발
    5. 설정파일 등록
        1. db의 접속 정보
        2. db에 table과 매핑되는 자바 클래스명 등록
        3. 설정 파일 리로딩시 table 생성 또는 유지에 대한 설정   

5. 주요 API
    1. @Entity
        - table과 1:1 매핑된 자바 클래스
    2. @Id   
        - primary key 의미
        - entity 클래스에 필수
    3. @GeneratedValue(strategy = GenerationType.IDENTITY)
        - strategy = GenerationType.IDENTITY
            : mysql auto_increment 
            : 속성 생략시 oracle의 sequence로  구동
      
    4. @Column(unique = true, nullable = false)
        - 생략도 가능
        - 자바클래스의 멤버 변수명과 table의 컬럼명이 일치
        - unique = true, nullable = false 옵션
            unique = true : 중복불허, null 허용
            nullable = false : null 불허
        - name 속성 적용시 자바 클래스의 멤버변수명과 table의 컬럼명 다르게 가능

*********java 주요 interface & class*************
EntityManagerFactory : EntityManager
= 1 : *
EntityManager : EntityTransaction 
= 1: 1

1. EntityManagerFactory
    - EntityManager 객체 생성
    - xml 설정 정보를 기반으로 해당 db와 entity를 매핑한 정보를 read 하면서 EntityManager 객체 생성

2. EntityManager
    - Connection -> PreparedStatement -> sql문장 실행 - > 결과 활용 -> 자원반환의 기능을 처리하는 단일 객체
    - 개별 user가 요청시 해당 객체만 생성 하여 실행
    - 주요 메소드
        1. insert - presist() - 제공
        2. select - find()
        3. update - setXxx() : 개발자가 개발하는 entity 클래스의 메소드
        4. delete - remove()
        5. close() - ResultSet -> Statement -> Connection 순으로 자원반환 
        6. clear() - persistent context 잔존된 정보를 삭제하는 메소드
                     clear() 호출후 find 할 경우에는 무조건 select 재 실행

3. EntityTransaction
    - commit과 rollback 필요한 sql 문장
        : insert/update/delete 
    - commit()
        : presist() / setXxx() / remove() 등의 메소드 영구 저장
    - rollback()